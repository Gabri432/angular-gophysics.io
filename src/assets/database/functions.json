[
    {
        "id": 1,
        "functionName": "Acceleration (force, mass float64)",
        "functionDescription": "Formula for the acceleration.",
        "functionFormula": "force/mass",
        "measurementUnit": "m/s^2",
        "context": "classical"
    },
    {
        "id": 3,
        "functionName": "AngularFreq (time float64)",
        "functionDescription": "Formula for the angular frequency.",
        "functionFormula": "(2 * greekPi) / time",
        "measurementUnit": "rad/s",
        "context": "classical"
    },
    {
        "id": 3,
        "functionName": "CentripetalAccel (speed, radius float64)",
        "functionDescription": "Centripetal acceleration.",
        "functionFormula": "(speed^2) / radius",
        "measurementUnit": "m/s^2",
        "context": "classical"
    },
    {
        "id": 4,
        "functionName": "CentripetalForce (mass, speed, radius float64)",
        "functionDescription": "Centripetal Force.",
        "functionFormula": "(mass * speed^2) / radius",
        "measurementUnit": "N",
        "context": "gravity"
    },
    {
        "id": 5,
        "functionName": "Density (weight, volume float64)",
        "functionDescription": "Formula for the density.",
        "functionFormula": "weight/volume",
        "measurementUnit": "kg/m^3",
        "context": "gravity"
    },
    {
        "id": 6,
        "functionName": "DopplerCloser (speed, frequence float64)",
        "functionDescription": "Doppler Effect when subject gets closer to source.",
        "functionFormula": "(1 + (speed / 340)) * frequence",
        "measurementUnit": "hertz",
        "context": ""
    },
    {
        "id": 7,
        "functionName": "DopplerFarer (speed, frequence float64)",
        "functionDescription": "Doppler Effect when subject gets farer from source.",
        "functionFormula": "(1 - (speed / 340)) * frequence",
        "measurementUnit": "hertz",
        "context": ""
    },
    {
        "id": 8,
        "functionName": "DriftSpeed (intensity, chargeCarrierDensity, area, particleCharge float64)",
        "functionDescription": "Formula for the drift speed.",
        "functionFormula": "intensity / (chargeCarrierDensity * area * particleCharge)",
        "measurementUnit": "m/s",
        "context": ""
    },
    {
        "id": 9,
        "functionName": "ElectricField (charge, radius float64)",
        "functionDescription": "Electric Field.",
        "functionFormula": "(charge) / (4 * greekPi * Vacuum Premittivity constant * radius^2)",
        "measurementUnit": "N/C",
        "context": ""
    },
    {
        "id": 10,
        "functionName": "ElectricPotentDiff (charge, distance1, distance2 float64)",
        "functionDescription": "",
        "functionFormula": "(charge / (4 * greekPi * Vacuum Premittivity constant)) * ((1 / distance1) - (1 / distance2))",
        "measurementUnit": "V",
        "context": ""
    },
    {
        "id": 11,
        "functionName": "ElectricPotentEnergyDiff (charge1, charge2, distance1, distance2 float64)",
        "functionDescription": "",
        "functionFormula": "[(charge1 * charge2) / (4 * greekPi * Vacuum Premittivity constant)] * [(1 / distance1) - (1 / distance2)]",
        "measurementUnit": "J",
        "context": ""
    },
    {
        "id": 12,
        "functionName": "ElectricPotential (charge, distance float64)",
        "functionDescription": "",
        "functionFormula": "(charge) / (4 * greekPi * Vacuum Premittivity constant * distance)",
        "measurementUnit": "V",
        "context": ""
    },
    {
        "id": 13,
        "functionName": "EnergyDens (electricFieldModule float64)",
        "functionDescription": "",
        "functionFormula": "(1 / 2) * Vacuum Premittivity constant * (electricFieldModule * electricFieldModule)",
        "measurementUnit": "J/m^3",
        "context": ""
    },
    {
        "id": 14,
        "functionName": "EnergyDensity (electricField, magneticField float64)",
        "functionDescription": "",
        "functionFormula": "(1/2) * Dieletric constant on vacuum * ( electricField * electricField ) + ( 1/(2 * Vacuum Premittivity constant))*(magneticField^2)",
        "measurementUnit": "J/m^3",
        "context": ""
    },
    {
        "id": 15,
        "functionName": "EscapeSpeed (mass, radius float64)",
        "functionDescription": "",
        "functionFormula": "[(2*G*mass) / (radius)]^(1/2)",
        "measurementUnit": "m/s",
        "context": ""
    },
    {
        "id": 16,
        "functionName": "Force (mass, acceleration float64)",
        "functionDescription": "",
        "functionFormula": "mass*acceleration",
        "measurementUnit": "N",
        "context": ""
    },
    {
        "id": 17,
        "functionName": "Frequency (speed, distance float64)",
        "functionDescription": "",
        "functionFormula": "speed / distance",
        "measurementUnit": "hertz",
        "context": ""
    },
    {
        "id": 18,
        "functionName": "GaussFlux (charge float64)",
        "functionDescription": "",
        "functionFormula": "charge / Vacuum Premittivity constant",
        "measurementUnit": "N*m^2/C",
        "context": ""
    },
    {
        "id": 19,
        "functionName": "GravAttract (mass1, mass2, distance float64)",
        "functionDescription": "",
        "functionFormula": "(G * mass1 * mass2) / (distance^2)",
        "measurementUnit": "m/s^2",
        "context": ""
    },
    {
        "id": 20,
        "functionName": "GravField (mass, distance float64)",
        "functionDescription": "",
        "functionFormula": "(G * mass) / (distance^2)",
        "measurementUnit": "m/s^2",
        "context": ""
    },
    {
        "id": 21,
        "functionName": "HeatFlux (thermalConductivityConstant, startingTemperatureKelvin, finalTemperatureKelvin, distance float64)",
        "functionDescription": "",
        "functionFormula": "-1 * thermalConductivityConstant * (finalTemperatureKelvin - startingTemperatureKelvin) / distance",
        "measurementUnit": "W",
        "context": ""
    },
    {
        "id": 22,
        "functionName": "HorizontalPos (velocity, timeInSeconds, angleInDeg float64)",
        "functionDescription": "",
        "functionFormula": "velocity * timeInSeconds * Cosine(angleInDeg)",
        "measurementUnit": "m",
        "context": ""
    },
    {
        "id": 23,
        "functionName": "Intensity (power, area float64)",
        "functionDescription": "",
        "functionFormula": "power / area",
        "measurementUnit": "W/m^2",
        "context": ""
    },
    {
        "id": 24,
        "functionName": "JouleHeating (resistance, currentIntensity float64)",
        "functionDescription": "",
        "functionFormula": "resistance * (currentIntensity^2)",
        "measurementUnit": "W",
        "context": ""
    },
    {
        "id": 25,
        "functionName": "KineticEner (mass, speed float64)",
        "functionDescription": "",
        "functionFormula": "(1 / 2) * mass * (speed^2)",
        "measurementUnit": "J",
        "context": ""
    },
    {
        "id": 26,
        "functionName": "LawCoulomb (charge1, charge2, distance float64)",
        "functionDescription": "",
        "functionFormula": "COULOMB constant * (|charge1| * |charge2|) / (distance^2)",
        "measurementUnit": "N",
        "context": ""
    },
    {
        "id": 27,
        "functionName": "LawGayLussacPressure (pressure, celsiusDeg_Temperature float64)",
        "functionDescription": "",
        "functionFormula": "pressure * (1 + (1/273)*(celsiusDeg_Temperature))",
        "measurementUnit": "Pascal",
        "context": ""
    },
    {
        "id": 28,
        "functionName": "LawGayLussacVolume (volume, celsiusDeg_Temperature float64)",
        "functionDescription": "",
        "functionFormula": "volume * (1 + (1/273)*(celsiusDeg_Temperature))",
        "measurementUnit": "m^3",
        "context": ""
    },
    {
        "id": 29,
        "functionName": "LawHagenPoiseuille (fluidViscosity, pipeLength, flowRate, pipeRadius float64)",
        "functionDescription": "",
        "functionFormula": "[(8 * fluidViscosity * pipeLength * flowRate) / (greekPi * pipeRadius^4)]",
        "measurementUnit": "Pascal",
        "context": ""
    },
    {
        "id": 30,
        "functionName": "LawOhm1 (resistance, currentIntensity float64)",
        "functionDescription": "",
        "functionFormula": "resistance * currentIntensity",
        "measurementUnit": "V",
        "context": ""
    },
    {
        "id": 31,
        "functionName": "LawOhm2 (resistivity, length, area float64)",
        "functionDescription": "",
        "functionFormula": "resistivity * length / area",
        "measurementUnit": "Ohm",
        "context": ""
    },
    {
        "id": 32,
        "functionName": "LawStokes (fluidViscosity, radius, speed float64)",
        "functionDescription": "",
        "functionFormula": "6 * greekPi * fluidViscosity * radius * speed",
        "measurementUnit": "N",
        "context": ""
    },
    {
        "id": 33,
        "functionName": "LorentzFactor (speed float64)",
        "functionDescription": "",
        "functionFormula": "1/{[1-(speed^2)/(C^2)]^(1/2)}",
        "measurementUnit": "None",
        "context": ""
    },
    {
        "id": 34,
        "functionName": "MechanicalEner (potential, kinetic float64)",
        "functionDescription": "",
        "functionFormula": "potential + kinetic",
        "measurementUnit": "J",
        "context": ""
    },
    {
        "id": 35,
        "functionName": "Momentum (mass, speed float64)",
        "functionDescription": "",
        "functionFormula": "mass * speed",
        "measurementUnit": "kg*m/s",
        "context": ""
    },
    {
        "id": 36,
        "functionName": "NetHeatEnergyTransfer (thermalConductivityConstant, area, kelvinDeg_HeatVariation, time, width float64)",
        "functionDescription": "",
        "functionFormula": "-1 * (thermalConductivityConstant * area * kelvinDeg_HeatVariation * time) / (width)",
        "measurementUnit": "J",
        "context": ""
    },
    {
        "id": 37,
        "functionName": "NormalForce (mass, angleInDeg float64)",
        "functionDescription": "",
        "functionFormula": "mass * Cosine(angleInDeg/radiant)",
        "measurementUnit": "N",
        "context": ""
    },
    {
        "id": 38,
        "functionName": "PendulumPeriod (pendulumLength float64)",
        "functionDescription": "",
        "functionFormula": "(2 * greekPi) * (pendulumLength/G)^(1/2)",
        "measurementUnit": "s",
        "context": ""
    },
    {
        "id": 39,
        "functionName": "PhotoElettricEffect (frequence float64)",
        "functionDescription": "",
        "functionFormula": "Planck constant * frequence",
        "measurementUnit": "J",
        "context": ""
    },
    {
        "id": 39,
        "functionName": "",
        "functionDescription": "",
        "functionFormula": "",
        "measurementUnit": "",
        "context": ""
    }
]

